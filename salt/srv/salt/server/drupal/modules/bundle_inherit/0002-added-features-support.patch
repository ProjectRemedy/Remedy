From da420071fec97797733816a9fce8802faacf984c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?S=C3=A9bastien=20Lavoie?= <github@lavoie.sl>
Date: Wed, 19 Dec 2012 00:55:01 -0500
Subject: [PATCH 2/2] added features support

---
 bundle_inherit.module |  50 ++++++++++++++++++++++
 features.inc          | 113 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 163 insertions(+)
 create mode 100644 features.inc

diff --git a/bundle_inherit.module b/bundle_inherit.module
index 3b281d6..d090eaa 100644
--- a/bundle_inherit.module
+++ b/bundle_inherit.module
@@ -530,3 +530,53 @@ function bundle_inherit_access_gate($callback, $arguments, $instance) {
 
     return true;
 }
+
+// Patched using http://drupal.org/files/bundle_inherit-features_support-1741268-2.patch
+
+/**
+ * Implementation of hook_features_api
+ *
+ * Here we define the components that we want to make exportable.  For this
+ * particular module, we want to make the configurations exportable.
+ */
+function bundle_inherit_features_api() {
+  return array(
+    'bundle_inherit' => array(
+      'name' => t('Bundle inherit'),
+      'default_file' => FEATURES_DEFAULTS_INCLUDED,
+      'feature_source' => TRUE,
+      'default_hook' => 'bundle_inherit_defaults',
+      'file' => drupal_get_path('module', 'bundle_inherit') . '/features.inc',
+    ),
+  );
+}
+
+/**
+ * Returns all or one inherit setting
+ * @staticvar array $inherits
+ * @param string $name
+ * @return array
+ */
+function bundle_inherit_load_inherits($name = '') {
+  static $inherits = array();
+
+  if (empty($inherits)) {
+
+    $query = db_select('bundle_hierarchy', 'bh');
+    $result = $query
+      ->fields('bh', array('entity_type', 'bundle', 'bundle_parent'))
+      ->execute();
+
+    foreach ($result as $row) {
+      $inherits[$row->bundle_parent . ' - ' . $row->bundle] = array('entity_type' => $row->entity_type,
+                                    'bundle' => $row->bundle,
+                                    'bundle_parent' => $row->bundle_parent);
+    }
+  }
+
+  if ($name) {
+    return (isset($inherits[$name]) ? $inherits[$name] : FALSE);
+  }
+
+  return $inherits;
+}
diff --git a/features.inc b/features.inc
new file mode 100644
index 0000000..ea56689
--- /dev/null
+++ b/features.inc
@@ -0,0 +1,113 @@
+<?php
+/**
+ * @file
+ * Bundle Inherit features include fiel.
+ */
+
+/**
+ * Implementation of hook_features_export_options. [component_hook]
+ *
+ * @return array
+ *   A keyed array of items, suitable for use with a FormAPI select or
+ *   checkboxes element.
+ */
+function bundle_inherit_features_export_options() {
+  $inherits = bundle_inherit_load_inherits();
+  $options = array();
+  foreach ($inherits as $name => $inherit) {
+    $options[$name] = $name;
+  }
+
+  return $options;
+}
+
+/**
+ * Implementation of hook_features_export [component hook]
+ *
+ * @param array $data
+ *   this is the machine name for the component in question
+ * @param array &$export
+ *   array of all components to be exported
+ * @param string $module_name
+ *   The name of the feature module to be generated.
+ * @return array
+ *   The pipe array of further processors that should be called
+ */
+function bundle_inherit_features_export($data, &$export, $module_name = '') {
+  foreach ((array)$data as $name) {
+    $inherit = bundle_inherit_load_inherits($name);
+
+    if ($inherit) {
+      $export['features']['bundle_inherit'][$name] = $name;
+    }
+  }
+
+  return array();
+}
+
+/**
+ * Implementation of hook_features_export_alter()
+ *
+ * Adds bundles for selected nodes that are using inheritance and dependencies if needed
+ */
+function bundle_inherit_features_export_alter(&$export, $module_name) {
+  $inherits = bundle_inherit_load_inherits();
+
+  foreach ($inherits as $name => $inherit) {
+    if ($inherit['entity_type'] == 'node' && isset($export['features']['node'][$inherit['bundle']])) {
+      $export['features']['bundle_inherit'][$name] = $name;
+    }
+  }
+
+  if (!empty($export['features']['bundle_inherit'])) {
+    $export['dependencies']['bundle_inherit'] = 'bundle_inherit';
+    $export['dependencies']['bundle_inherit_node'] = 'bundle_inherit_node';
+  }
+}
+
+/**
+ * Implementation of hook_features_export_render()
+ */
+function bundle_inherit_features_export_render($module_name, $data) {
+  $code = array();
+  $code[] = '  $data = array();';
+  $code[] = '';
+
+  $inherits = bundle_inherit_load_inherits();
+
+  foreach ($data as $name) {
+    if ($inherit = bundle_inherit_load_inherits($name)) {
+      $code[] = "  \$data['$name'] = " . features_var_export($inherit, '  ') . ';' . PHP_EOL;
+    }
+  }
+
+  $code[] = '  return $data;';
+  $code = implode("\n", $code);
+
+  return array('bundle_inherit_defaults' => $code);
+}
+
+/**
+ * Implementation of hook_features_rebuild()
+ */
+function bundle_inherit_features_rebuild($module) {
+    bundle_inherit_features_revert($module);
+}
+
+/**
+ * Implementation of hook_features_revert()
+ */
+function bundle_inherit_features_revert($module) {
+  $data = module_invoke($module, 'bundle_inherit_defaults');
+
+  foreach ($data as $name => $inherit) {
+    // Restore the inheritance settings
+    db_query("DELETE FROM {bundle_hierarchy} WHERE entity_type = :entity_type AND bundle = :bundle", array(':entity_type' => $inherit['entity_type'], ':bundle' => $inherit['entity_type']));
+    db_query("INSERT INTO {bundle_hierarchy} (entity_type, bundle, bundle_parent)
+              VALUES(:entity_type, :bundle, :bundle_parent)",
+              array(':entity_type'    => $inherit['entity_type'],
+                    ':bundle'         => $inherit['bundle'],
+                    ':bundle_parent'  => $inherit['bundle_parent'],
+              ));
+  }
+}
-- 
1.8.0.1

